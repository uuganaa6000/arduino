#include <ESP8266WiFi.h>
#include <ArduinoJson.h>
void ledsetup(void);
void ledloop(void);
void ledAirconController(int commandReciever);
void BME280Setup(void);
void BME280loop(double BME280Result[4]);
StaticJsonBuffer<200> jsonBuffer;

const char* ssid     = "W03_FC3F7CBF3546";
const char* password = "r46am0gb91bir54";

// WiFi connection
int connectWifi(void){
  int c = 0;
  Serial.println("Waiting for Wifi to connect");  
  while ( c < 20 ) {
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("WiFi connected.");
        return(1); 
    }
    delay(500);
    Serial.print(WiFi.status());    
    c++;
  }
  return(0);  
}

void setup() {
  Serial.begin(115200);
  // start by connecting to a WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  if ( connectWifi()) {
    Serial.println("");
    Serial.println("WiFi connected");  
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
  
    ledsetup();
    BME280Setup();
  }
  else {
      Serial.println("");
      Serial.println("Connect timed out");
  }
}

const char* host = "52.68.218.117";
const int httpPort = 80;
void updateTemp(double BME280Result[4]) {
  Serial.print("Connecting to "); Serial.println(host);
  WiFiClient client;
  if (!client.connect(host, httpPort)) {
    Serial.println("Connection failed");
    return;
  }
  String param_temperature = "temperature=" + String(BME280Result[0]);
  String param_humidity = "&humidity=" + String(BME280Result[2]);
  String param_pressure = "&pressure=" + String(BME280Result[1]);
  String url = "/sbaby/set_json.php?" + param_temperature + param_humidity + param_pressure;
  
  Serial.print("Requesting URL: ");  Serial.println(url);
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n");
  delay(1000);
  int rownums = 0;
  while(client.available()){
    String line = client.readStringUntil('\r');
    rownums++;
    if(rownums > 7){
       if (line.length() < 2){
         Serial.println("continue");
         continue;
       }
       String jsonstr = line.substring(2, line.length() - 1);
       JsonObject& root = jsonBuffer.parseObject(jsonstr);
       root.printTo(Serial);
       if (!root.success()) {
         Serial.println("parseObject() failed");
       }else{
         String res = root["result"];
         if(res != "OK"){
             Serial.println("errors with update query");
         }
       }
    }
  }
  Serial.println("Closing connection");
}

void airconController() {
  Serial.print("Connecting to "); Serial.println(host);
  WiFiClient client;
  if (!client.connect(host, httpPort)) {
    Serial.println("Connection failed");
    return;
  }
  String url = "/sbaby/get_switch.php";
  Serial.print("Requesting URL: ");  Serial.println(url);
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n");
  delay(500);
  int rownums = 0;
  StaticJsonBuffer<200> buffer;
  while(client.available()){
    String line = client.readStringUntil('\r');
    rownums++;
    if(rownums > 7){
       if (line.length() < 2){
         Serial.println("continue");
         continue;
       }
       //JsonArray& array = buffer.parseArray(line);
       String jsonstr = line.substring(2, line.length() - 1);
       JsonObject& root = buffer.parseObject(jsonstr);
       root.printTo(Serial);
       if (!root.success()) {
         Serial.println("airconController: parseObject() failed");
       }else{
         int swtch = root["_switch"];
         ledAirconController(swtch);
       }
       Serial.println(jsonstr);
    }
  }
  Serial.println("Closing connection");
}

int times = 0;
void loop() {
  ledloop();
  if((times % 10) == 0){
    double BME280Result[4];
    BME280loop(BME280Result);
    updateTemp(BME280Result);
    times = 0;
  }
  airconController();
  times++;
  delay(500);
}
