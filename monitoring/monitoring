/*
 *  Simple HTTP get webclient test
 */
 
#include <ESP8266WiFi.h>
void ledsetup(void);
void ledloop(void);
void BME280Setup(void);
void BME280loop(double BME280Result[4]);

const char* ssid     = "W03_FC3F7CBF3546";
const char* password = "r46am0gb91bir54";

// WiFi connection
int connectWifi(void){
  int c = 0;
  Serial.println("Waiting for Wifi to connect");  
  while ( c < 20 ) {
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("WiFi connected.");
        return(1); 
    }
    delay(500);
    Serial.print(WiFi.status());    
    c++;
  }
  return(0);  
}

void setup() {
  Serial.begin(115200);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  if ( connectWifi()) {
    Serial.println("");
    Serial.println("WiFi connected");  
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
  
    ledsetup();
    BME280Setup();
  }
  else {
      Serial.println("");
      Serial.println("Connect timed out");
  }
}

int8_t utc_offset = +9; // hours off of UTC, e.g. JP is +9 
const char* host = "52.68.218.117";
const int httpPort = 80;
int16_t weathercode = -1;
int16_t createhour, createmin;
uint32_t timekeep=0xFFFF;

void updateTemp(double BME280Result[4]) {
  Serial.print("Connecting to "); Serial.println(host);
  
  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  if (!client.connect(host, httpPort)) {
    Serial.println("Connection failed");
    return;
  }
  // We now create a URI for the request
  // String url = String(path_prefix) + String(location) + String(path_postfix);
  String param_temperature = "temperature=" + String(BME280Result[0]);
  String param_humidity = "&humidity=" + String(BME280Result[2]);
  String param_pressure = "&pressure=" + String(BME280Result[1]);
  String url = "/sbaby/set_json.php?" + param_temperature + param_humidity + param_pressure;
  
  Serial.print("Requesting URL: ");  Serial.println(url);
  
  // This will send the request to the server
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n");
  delay(500);

  weathercode = -1;
  // Read all the lines of the reply from server and print them to Serial
  while(client.available()){
    String line = client.readStringUntil('\r');
    int i = line.indexOf(String("\"code\":"));
    if (i < 0) continue;
    Serial.println(line);
    weathercode = (line.substring(i+8)).toInt();

    // extract hour and minute
    i = line.indexOf(String("\"created\":"));
    if (i < 0) continue;
    createhour = (line.substring(i+22)).toInt();
    createmin = (line.substring(i+25)).toInt();
  }
  
  Serial.println("Closing connection");

  // convert from UTC to local
  createhour += 24;
  createhour += utc_offset;
  createhour %= 24;
  Serial.print("\nWeather code: "); Serial.print(weathercode);
  Serial.print(" @ "); Serial.print(createhour); Serial.print(":"); Serial.println(createmin);

  // Get the current time of day, between 0 and 65535
  uint16_t timeofday = map((createhour * 60) + createmin, 0, 1440, 0, 65535);

  Serial.print("Time of day = "); Serial.print(timeofday); Serial.println("/65535");
  delay(10000);
}


int value = 0;
void loop() {
  ledloop();
  double BME280Result[4];
  BME280loop(BME280Result);
  updateTemp(BME280Result);
}
